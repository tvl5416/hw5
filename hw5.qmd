---
title: "Homework 5"
author: "[Taehwan Lee]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
execute: 
  freeze: true
  cache: true
format:
  #html: # comment this line to get pdf
   pdf: 
    fig-width: 7
    fig-height: 7
---


---

::: {.callout-important style="font-size: 0.8em;"}

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::


In this assignment, we will explore decision trees, support vector machines and neural networks for classification and regression. The assignment is designed to test your ability to fit and analyze these models with different configurations and compare their performance.

We will need the following packages:


```{R, message=FALSE, warning=FALSE, results='hide'}
packages <- c(
  "tibble",
  "dplyr", 
  "readr", 
  "tidyr", 
  "purrr", 
  "broom",
  "magrittr",
  "corrplot",
  "caret",
  "rpart",
  "rpart.plot",
  "e1071",
  "torch", 
  "luz"
)

# renv::install(packages)
sapply(packages, require, character.only=T)
```

<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 60 points
Prediction of Median House prices
:::

###### 1.1 (2.5 points)


The `data` folder contains the `housing.csv` dataset which contains housing prices in California from the 1990 California census. The objective is to predict the median house price for California districts based on various features.


Read the data file as a tibble in R. Preprocess the data such that:

1. the variables are of the right data type, e.g., categorical variables are encoded as factors
2. all column names to lower case for consistency
3. Any observations with missing values are dropped
```{R}
path <- "data/housing.csv"

df <- read_csv(path) %>%
  # Convert column names to lower case
  rename_with(tolower) %>%
  # Convert categorical variables to factors. Assuming 'ocean_proximity' is the only categorical variable here
  mutate(ocean_proximity = as.factor(ocean_proximity)) %>%
  # Remove observations with missing values
  drop_na()
```



---

###### 1.2 (2.5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
df %>% 
    select_if(is.numeric) %>%
    cor() %>%
    corrplot(method = "circle")
```


---

###### 1.3 (5 points)

Split the data `df` into `df_train` and `df_split` using `test_ind` in the code below:

```{R}
set.seed(42)
test_ind <- sample(
  1:nrow(df), 
  floor( nrow(df)/10 ),
  replace=FALSE
)

df_train <- df %>% slice(-test_ind)
df_test <- df %>% slice(test_ind)
```


---

###### 1.4 (5 points)

Fit a linear regression model to predict the `median_house_value` :

* `latitude`
* `longitude`
* `housing_median_age`
* `total_rooms`
* `total_bedrooms`
* `population`
* `median_income`
* `ocean_proximity`

Interpret the coefficients and summarize your results. 

```{R}
lm_fit <- lm(median_house_value ~ latitude + longitude + housing_median_age + total_rooms + total_bedrooms + population + median_income + ocean_proximity, data = df_train)

summary(lm_fit)

```
There is strong negative impact of latitude and longitude, suggesting geographical areas play a crucial role in housing prices. The model underscores the importance of median income as the most substantial positive predictor, indicating that economic factors greatly influence house values. Population density negatively affects house values, while the age of housing positively correlates, suggesting older districts command higher prices. Additionally, proximity to the ocean has a varied impact, with inland locations decreasing values and properties on islands significantly increasing them, reflecting the premium placed on desirable locations.

---

###### 1.5 (5 points)

Complete the `rmse` function for computing the Root Mean-Squared Error between the true `y` and the predicted `yhat`, and use it to compute the RMSE for the regression model on `df_test`
```{R}
rmse <- function(y, yhat) {
  sqrt(mean((y - yhat)^2))
}

lm_predictions <- predict(lm_fit, newdata = df_test)

rmse(df_test$median_house_value, lm_predictions)
```




###### 1.6 (5 points)

Fit a decision tree model to predict the `median_house_value` using the same predictors as in 1.4. Use the `rpart()` function.

```{R}
rpart_fit <- rpart(median_house_value ~ latitude + longitude + housing_median_age + total_rooms + total_bedrooms + population + median_income + ocean_proximity, data = df_train, method = "anova")
rpart_predictions <- predict(rpart_fit, newdata = df_test)
```




Visualize the decision tree using the `rpart.plot()` function. 

```{R}
library(rpart.plot)

rpart.plot(rpart_fit)
```




Report the root mean squared error on the test set.

```{R}
rpart_predictions <- predict(rpart_fit, newdata = df_test)
rmse(df_test$median_house_value, rpart_predictions)

```



---

###### 1.7 (5 points)

Fit a support vector machine model to predict the `median_house_value` using the same predictors as in 1.4. Use the `svm()` function and use any kernel of your choice. Report the root mean squared error on the test set.

```{R}
svm_fit <- svm(median_house_value ~ latitude + longitude + housing_median_age + total_rooms + total_bedrooms + population + median_income + ocean_proximity, 
               data = df_train, 
               kernel = "radial")

svm_predictions <- predict(svm_fit, newdata = df_test)

rmse(df_test$median_house_value, svm_predictions)
```


---

###### 1.8 (25 points)

Initialize a neural network model architecture:

```{R}
NNet <- nn_module(
  initialize = function(p, q1, q2, q3) {
    architecture <- list(
      layer("input", size = p), 
      layer("fully_connected", size = q1),  
      layer("fully_connected", size = q2),  
      layer("fully_connected", size = q3),  
      layer("output", size = 1)  
    )
    return(architecture)
  },
  forward = function(x) {
    x <- relu(x %*% weight("fully_connected_1") + bias("fully_connected_1"))
    x <- relu(x %*% weight("fully_connected_2") + bias("fully_connected_2"))
    x <- relu(x %*% weight("fully_connected_3") + bias("fully_connected_3"))
    x <- x %*% weight("output") + bias("output")
    return(x)
  }
)
```




Fit a neural network model to predict the `median_house_value` using the same predictors as in 1.4. Use the `model.matrix` function to create the covariate matrix and `luz` package for fitting the network with $32, 16, 8$ nodes in each of the three hidden layers. 

```{R}
nnet_fit <- NNet %>%
  setup(
    input_size = ncol(df_train),  
    q1 = 64, 
    q2 = 32, 
    q3 = 16   
  ) %>%
  set_hparams(
    optimizer = "adam",  
    learning_rate = 0.001,  
    loss_function = "mse" 
  ) %>%
  set_opt_params(
    epochs = 100,   
    batch_size = 32  
  )%>%
  fit(
    x = model.matrix(~., data = train_data), 
    y = train_data$median_house_value,  
    validation_split = 0.2,  
    verbose = FALSE  
  )
```

```R
nnet_fit <- NNet %>% 
  setup(
    ... # Insert your code here
  ) %>%
  set_hparams(
    ... # Insert your code here
  ) %>%
  set_opt_params(
    ... # Insert your code here
  ) %>%
  fit(
    ... # Insert your code here
    dataloader_options = ... # Insert your code here
    verbose = FALSE # Change to TRUE while tuning. But, set to FALSE before submitting

  )
```

Plot the results of the training and validation loss and accuracy.

```{R}
predict(nnet_fit, as.matrix(test_data))
```




Report the root mean squared error on the test set.

```{R}
nnet_predictions <- predict(nnet_fit, as.matrix(df_test))
```


::: {.callout-warning}
Remember to use the `as_array()` function to convert the predictions to a vector of numbers before computing the RMSE with `rmse()`
:::

---

###### 1.9 (5 points)

Summarize your results in a table comparing the RMSE for the different models. Which model performed best? Why do you think that is?

```R
... # Insert your code here
```



<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 50 points
Spam email classification
:::

The `data` folder contains the `spam.csv` dataset. This dataset contains features extracted from a collection of spam and non-spam emails. The objective is to classify the emails as spam or non-spam.

---

###### 2.1 (2.5 points)

Read the data file as a tibble in R. Preprocess the data such that:

1. the variables are of the right data type, e.g., categorical variables are encoded as factors
2. all column names to lower case for consistency
3. Any observations with missing values are dropped

```R
df <- ... # Insert your code here
```

---

###### 2.2 (2.5 points)

Split the data `df` into `df_train` and `df_split` using `test_ind` in the code below:

```R
set.seed(42)
test_ind <- sample(
  1:nrow(df), 
  floor( nrow(df)/10 ),
  replace=FALSE
)

df_train <- ... # Insert your code here
df_test  <- ... # Insert your code here
```

Complete the `overview` function which returns a data frame with the following columns: `accuracy`, `error`, `false positive rate`, `true positive rate`, between the true `true_class` and the predicted `pred_class` for any classification model.

```R
overview <- function(pred_class, true_class) {
  accuracy <- ... # Insert your code here
  error <- ... # Insert your code here
  true_positives <- ... # Insert your code here
  true_negatives <- ... # Insert your code here
  false_positives <- ... # Insert your code here
  false_negatives <- ... # Insert your code here
  true_positive_rate <- ... # Insert your code here
  false_positive_rate <- ...  # Insert your code here
  return(
    data.frame(
      accuracy = accuracy,
      error = error,
      true_positive_rate = true_positive_rate,
      false_positive_rate = false_positive_rate
    )
  )
}
```


---

###### 2.3 (5 points)

Fit a logistic regression model to predict the `spam` variable using the remaining predictors. Report the prediction accuracy on the test set.

```R
glm_fit <- ... # Insert your code here
glm_classes <- ... # Insert your code here
```

---

###### 2.4 (5 points)

Fit a decision tree model to predict the `spam` variable using the remaining predictors. Use the `rpart()` function and set the `method` argument to `"class"`. 

```R
rpart_classes <- ... # Insert your code here
```

Visualize the decision tree using the `rpart.plot()` function. 

```R
... # Insert your code here
```

Report the prediction accuracy on the test set.

```R
rpart_classes <- ... # Insert your code here
```

---

###### 2.5 (5 points)

Fit a support vector machine model to predict the `spam` variable using the remaining predictors. Use the `svm()` function and use any kernel of your choice. Remember to set the `type` argument to `"C-classification"` **if you haven't** already converted `spam` to be of type `factor`.


```R
svm_fit <- ... # Insert your code here
```
Report the prediction accuracy on the test set.

```R
svm_classes <- ... # Insert your code here
```

---

###### 2.6 (25 points)

Using the same neural network architecture as in 1.9, fit a neural network model to predict the `spam` variable using the remaining predictors. 

::: {.callout-warning}
## Classification vs. Regression

Note that the neural network in **Q 1.9** was a regression model. You will need to modify the neural network architecture to be a classification model by changing the output layer to have a single node with a sigmoid activation function.
:::

Use the `model.matrix` function to create the covariate matrix and `luz` package for fitting the network with $32, 16, 8$ nodes in each of the three hidden layers. 

```R
nnet_fit <- NNet %>% 
  setup(
    ... # Insert your code here
  ) %>%
  set_hparams(
    ... # Insert your code here
  ) %>%
  set_opt_params(
    ... # Insert your code here
  ) %>%
  fit(
    ... # Insert your code here
    dataloader_options = ... # Insert your code here
    verbose = FALSE # Change to TRUE while tuning. But, set to FALSE before submitting

  )
```

---

###### 2.7 (5 points)

Summarize your results in a table comparing the accuracy metrics for the different models. 

```R
... # Insert your code here
```

If you were to choose a model to classify spam emails, which model would you choose? Think about the context of the problem and the cost of false positives and false negatives.



<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 60 points

Three spirals classification

:::

To better illustrate the power of depth in neural networks, we will use a toy dataset called the "Three Spirals" data. This dataset consists of two intertwined spirals, making it challenging for shallow models to classify the data accurately. 

::: {.callout-warning}
## This is a multi-class classification problem
:::

The dataset can be generated using the provided R code below:

```{R}
generate_three_spirals <- function(){
  set.seed(42)
  n <- 500
  noise <- 0.2
  t <- (1:n) / n * 2 * pi
  x1 <- c(
      t * (sin(t) + rnorm(n, 0, noise)),
      t * (sin(t + 2 * pi/3) + rnorm(n, 0, noise)),
      t * (sin(t + 4 * pi/3) + rnorm(n, 0, noise))
    )
  x2 <- c(
      t * (cos(t) + rnorm(n, 0, noise)),
      t * (cos(t + 2 * pi/3) + rnorm(n, 0, noise)),
      t * (cos(t + 4 * pi/3) + rnorm(n, 0, noise))
    )
  y <- as.factor(
    c(
      rep(0, n), 
      rep(1, n), 
      rep(2, n)
    )
  )
  return(tibble::tibble(x1=x1, x2=x2, y=y))
}
```

---

###### 3.1 (5 points)

Generate the three spirals dataset using the code above. Plot $x_1$ vs $x_2$ and use the `y` variable to color the points. 


```{R}
df <- generate_three_spirals()

plot(
  df$x1, df$x2,
  col = df$y,
  pch = 20
)
```

Define a grid of $100$ points from $-10$ to $10$ in both $x_1$ and $x_2$ using the `expand.grid()`. Save it as a tibble called `df_test`. 

```R
grid <- ... # Insert your code here
df_test <- ... # Insert your code here
```

---

###### 3.2 (10 points)

Fit a classification tree model to predict the `y` variable using the `x1` and `x2` predictors, and plot the decision boundary. 

```R
rpart_fit <- ... # Insert your code here
rpart_classes <- ... # Insert your code here
```

Plot the decision boundary using the following function:

```R
plot_decision_boundary <- function(predictions){
  plot(
    df_test$x1, df_test$x2, 
    col = predictions,
    pch = 0
  )
  points(
    df$x1, df$x2,
    col = df$y,
    pch = 20
  )
}
```

```R
plot_decision_boundary(rpart_classes)
```

---

###### 3.3 (10 points)

Fit a support vector machine model to predict the `y` variable using the `x1` and `x2` predictors. Use the `svm()` function and use any kernel of your choice. Remember to set the `type` argument to `"C-classification"` **if you haven't** converted `y` to be of type `factor`.

```R
svm_fit <- ... # Insert your code here
svm_classes <- ... # Insert your code here
plot_decision_boundary(svm_classes)
```

---

::: {.callout-warning}
## Instructions

For the next questions, you will need to fit a series of neural networks. In all cases, you can:

* set the number of units in each hidden layer to 10 
* set the output dimension `o` to 3 (remember this is multinomial classification)
* use the appropriate loss function for the problem (**not `nn_bce_loss`**)
* set the number of epochs to $50$
* fit the model using the `luz` package

You can use any optimizer of your choice, but you **will need to tune the learning rate for each problem**.
:::


###### 3.4 (10 points)

Fit a neural network with **1 hidden layer** to predict the `y` variable using the `x1` and `x2` predictors.

```R
NN1 <- nn_module(
  initialize = function(p, q1, o){
    self$hidden1 <- ... # Insert your code here
    self$output <- ... # Insert your code here
    self$activation <- ... # Insert your code here
  },
  forward = function(x){
    x %>% 
      self$hidden1() %>% 
      self$activation() %>% 
      self$output()
  }
)

fit_1 <- NN1 %>% 
  setup(
    ... # Insert your code here
  ) %>%
  set_hparams(
    ... # Insert your code here
  ) %>%
  set_opt_params(
    ... # Insert your code here
  ) %>%
  fit(
    data = list(
      df %>% select(x1, x2) %>% as.matrix,
      df$y %>% as.integer
    ),
    ... # Insert your code here
    dataloader_options = ... # Insert your code here
    verbose = FALSE
  )
```

In order to generate the class predictions, you will need to use the `predict()` function as follows

```R
test_matrix <- df_test %>% select(x1, x2) %>% as.matrix

fit_1_predictions <- predict(fit_1, test_matrix) %>% 
  argmax(2) %>% 
  as.integer()
```

Plot the results using the `plot_decision_boundary()` function.

---

###### 3.5 (10 points)

Fit a neural network with **0 hidden layers** to predict the `y` variable using the `x1` and `x2` predictors.

```R
NN0 <- nn_module(
  initialize = function(p, o){
    ... # Insert your code here
  },
  forward = function(x){
    x %>% 
    ... # Insert your code here
  }
)

fit_0 <- NN0 %>% 
  setup(...) %>%
  set_hparams(...) %>%
  set_opt_params(...) %>%
  fit(...)
```

Plot the results using the `plot_decision_boundary()` function.

---


###### 3.6 (10 points)

Fit a neural network with **3 hidden layers** to predict the `y` variable using the `x1` and `x2` predictors.

```R
NN2 <- nn_module(
  initialize = function(p, q1, q2, o){
    ... # Insert your code here
  },
  forward = function(x){
    x %>% 
    ... # Insert your code here
  }
)

fit_2 <- NN3 %>% 
  setup(...) %>%
  set_hparams(...) %>%
  set_opt_params(...) %>%
  fit(...)
```

Plot the results using the `plot_decision_boundary()` function.

---

###### 3.7 (5 points)

What are the differences between the models? How do the decision boundaries change as the number of hidden layers increases?


---


:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---



::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::